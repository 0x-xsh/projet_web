version: '3.0'

services:
  # Service Registry - Consul
  consul:
    image: hashicorp/consul:1.15.4
    ports:
      - "8500:8500"  # UI and API
      - "8600:8600/udp"  # DNS interface
    volumes:
      - consul_data:/consul/data
    command: "agent -server -ui -bootstrap-expect=1 -client=0.0.0.0"
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  # Kong database
  kong-db:
    image: postgres:13
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
      - POSTGRES_PASSWORD=kong
    ports:
      - "5434:5432"
    volumes:
      - kong_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  # Kong migration service
  kong-migrations:
    image: kong:latest
    depends_on:
      - kong-db
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-db
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
      - KONG_PG_DATABASE=kong
    command: kong migrations bootstrap
    restart: on-failure
    networks:
      - microservices-network

  # Kong API Gateway
  kong:
    image: kong:latest
    depends_on:
      - kong-db
      - kong-migrations
      - consul
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-db
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
      - KONG_PG_DATABASE=kong
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
      - KONG_PROXY_LISTEN=0.0.0.0:8000, 0.0.0.0:8443 ssl
    ports:
      - "8000:8000"  # Kong proxy
      - "8443:8443"  # Kong proxy SSL
      - "8001:8001"  # Kong admin API
      - "8444:8444"  # Kong admin API SSL
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - microservices-network

  # Kong Admin UI (Konga)
  konga:
    image: pantsel/konga:latest
    depends_on:
      - kong
    ports:
      - "1337:1337"
    environment:
      - NODE_ENV=production
      - DB_ADAPTER=postgres
      - DB_HOST=kong-db
      - DB_USER=kong
      - DB_PASSWORD=kong
      - DB_DATABASE=konga_db
      - KONGA_HOOK_TIMEOUT=120000
      - DB_PG_SCHEMA=public
    restart: always
    networks:
      - microservices-network

  auth_service:
    build: ./auth_service
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:9000"
    volumes:
      - ./auth_service:/app
    ports:
      - "9000:9000"
    environment:
      - DEBUG=1
      - SECRET_KEY=django-insecure-h0m%rz_qg@mj+^)_vxh3zp=wq+=4$$%rl-4n!b9u4^f8=r@u)2k
      - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1] projet_web-auth_service-1 projet_web-auth_service-1:9000 *
      - SQL_ENGINE=django.db.backends.postgresql
      - SQL_DATABASE=microservices_db
      - SQL_USER=postgres
      - SQL_PASSWORD=postgres
      - SQL_HOST=db
      - SQL_PORT=5432
      - SERVICE_NAME=auth-service  # For service discovery
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
    depends_on:
      - db
      - consul
    networks:
      - microservices-network

  users_service:
    build: ./users_service
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:9002"
    volumes:
      - ./users_service:/app
    ports:
      - "9002:9002"
    environment:
      - DEBUG=1
      - SECRET_KEY=django-insecure-h0m%rz_qg@mj+^)_vxh3zp=wq+=4$$%rl-4n!b9u4^f8=r@u)2k
      - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1] projet_web-users_service-1 projet_web-users_service-1:9002 *
      - SQL_ENGINE=django.db.backends.postgresql
      - SQL_DATABASE=microservices_db
      - SQL_USER=postgres
      - SQL_PASSWORD=postgres
      - SQL_HOST=db
      - SQL_PORT=5432
      - AUTH_SERVICE_URL=http://auth-service:9000
      - SERVICE_NAME=users-service  # For service discovery
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
    depends_on:
      - db
      - auth_service
      - consul
    networks:
      - microservices-network

  posts_service:
    build: ./posts_service
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:9001"
    volumes:
      - ./posts_service:/app
    ports:
      - "9001:9001"
    environment:
      - DEBUG=1
      - SECRET_KEY=django-insecure-h0m%rz_qg@mj+^)_vxh3zp=wq+=4$$%rl-4n!b9u4^f8=r@u)2k
      - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1] projet_web-posts_service-1 projet_web-posts_service-1:9001 *
      - SQL_ENGINE=django.db.backends.postgresql
      - SQL_DATABASE=microservices_db
      - SQL_USER=postgres
      - SQL_PASSWORD=postgres
      - SQL_HOST=db
      - SQL_PORT=5432
      - AUTH_SERVICE_URL=http://auth-service:9000
      - USERS_SERVICE_URL=http://users-service:9002
      - SERVICE_NAME=posts-service  # For service discovery
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
    depends_on:
      - db
      - auth_service
      - users_service
      - consul
    networks:
      - microservices-network

  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=microservices_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5433:5432"
    networks:
      - microservices-network

volumes:
  postgres_data:
  kong_data:
  consul_data:

networks:
  microservices-network:
    driver: bridge 